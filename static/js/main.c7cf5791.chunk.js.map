{"version":3,"sources":["components/ImageDisplay.js","App.js","serviceWorker.js","index.js"],"names":["ImageDisplay","props","className","src","url","alt","unsplash","Unsplash","accessKey","App","useState","search","setSearch","images","getImages","findImages","searchPeram","photos","orientation","content_filter","then","toJson","json","results","forEach","res","push","onChange","e","target","value","onClick","console","log","id","map","image","desc","alt_description","urls","regular","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAYeA,MATf,SAAsBC,GAClB,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,MAAMC,IAAMF,EAAMG,IAAKC,IAAKJ,EAAMI,Q,OCCvDC,EAAW,I,OAAIC,GAAS,CAC5BC,UAAW,gDA6CEC,MAzCf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGeF,mBAAS,IAHxB,mBAGNG,EAHM,KAGEC,EAHF,KAUTC,EAAa,SAACC,GAClBV,EAASK,OAAOM,OAAOD,EAAa,EAAG,GAAI,CAAEE,YAAa,YAAc,CAACC,eAAgB,SACxFC,KAAKC,UACLD,MAAK,SAAAE,GACJ,IAAIT,EAAS,GACbS,EAAKC,QAAQC,SAAQ,SAAAC,GACnBZ,EAAOa,KAAKD,MAEdX,EAAUD,OAKZ,OACE,yBAAKX,UAAU,OACb,wDACA,2BAAOA,UAAU,cAAcyB,SAAU,SAAAC,GAAC,OAAEhB,EAAUgB,EAAEC,OAAOC,UAC/D,4BAAQ5B,UAAU,eAAe6B,QAAS,kBArB1ChB,EAAWJ,QACXqB,QAAQC,IAAIpB,KAoBZ,UACA,yBAAKqB,GAAG,iBACLrB,EAAOsB,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CACEC,KAAQD,EAAME,gBACdlC,IAAOgC,EAAMG,KAAKC,gBChCVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.c7cf5791.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\nfunction ImageDisplay(props){\n    return (\n        <div className='img-display'>\n            <img className='img' src= {props.url} alt={props.alt}/>\n        </div>\n    )\n\n}\n\nexport default ImageDisplay;","import React, {useState} from 'react';\nimport './App.css';\nimport ImageDisplay from \"./components/ImageDisplay\";\n\n// ES Modules syntax\nimport Unsplash, { toJson } from \"unsplash-js\";\n// require syntax\nconst unsplash = new Unsplash({\n  accessKey: 'rlZeOgPeOeRkfHFGxIsAY89BvxcJNLiq9mjM86mb4vQ'\n});\n\n\nfunction App() {\n\n  const [search, setSearch] = useState('')\n  const [images, getImages] = useState([])\n\n  const returnSearch = () =>{\n      findImages(search)\n      console.log(images)\n  }\n\nconst findImages = (searchPeram)=>{\n  unsplash.search.photos(searchPeram, 1, 25, { orientation: \"portrait\" }, {content_filter: \"high\"})\n  .then(toJson)\n  .then(json => {\n    let images = []\n    json.results.forEach(res=>{\n      images.push(res)\n    })\n    getImages(images)\n  });\n}\n\n\n  return (\n    <div className=\"App\">\n      <h1>Blue Toad Sample Project</h1>\n      <input className=\"image-input\" onChange={e=>setSearch(e.target.value)}/>\n      <button className=\"image-search\" onClick={()=>returnSearch()}>Search</button>\n      <div id='img-container'>\n        {images.map(image=>(\n          <ImageDisplay\n            desc = {image.alt_description}\n            url = {image.urls.regular}\n          />\n        ))}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}